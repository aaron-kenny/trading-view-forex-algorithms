//@version=4
// Rules:
// 1. Above daily EMA
// 2. Under hourly 50 EMA
// 3. Confirmation candles if wanted
strategy(title='Praepositus', overlay=true, default_qty_type=strategy.cash, default_qty_value=100000, currency='USD', linktoseries=true, commission_type=strategy.commission.cash_per_order, commission_value=27, pyramiding=2)

// Inputs
////////////////////////////////////////////////
profitTarget = input(defval=5000, title='Profit Target Ticks', type=input.integer)

// Triangular Moving Average
////////////////////////////////////////////////
length = input(title="TMA Length", type=input.integer, defval=20, minval=1)
tmaSrc = input(title="TMA Source", type=input.source, defval=close)
tma = sma(sma(tmaSrc, ceil(length / 2)), floor(length / 2) + 1)
tmaColor = tma > tma[1] ? color.green : color.red
plot(tma, title="TMA", linewidth=1, color=tmaColor, transp=0)

// MavilimW
////////////////////////////////////////////////
fmal = input(3,'First Moving Average length')
smal = input(5,'Second Moving Average length')
tmal = fmal + smal
Fmal = smal + tmal
Ftmal = tmal + Fmal
Smal = Fmal + Ftmal

M1 = wma(close, fmal)
M2 = wma(M1, smal)
M3 = wma(M2, tmal)
M4 = wma(M3, Fmal)
M5 = wma(M4, Ftmal)
MAVW = wma(M5, Smal)
col1 = MAVW > MAVW[1]
col3 = MAVW < MAVW[1]
lineColor = col1 ? color.blue : col3 ? color.red : color.yellow

// plot(MAVW, color=lineColor, linewidth=2, title="MAVW")

// Schaff Trend Cycle
////////////////////////////////////////////////
fastLength = input(title="Schaff MACD Fast Length", type=input.integer, defval=25)
slowLength = input(title="Schaff MACD Slow Length", type=input.integer, defval=50)
cycleLength = input(title="Schaff Cycle Length", type=input.integer, defval=46)
d1Length = input(title="Schaff 1st %D Length", type=input.integer, defval=3)
d2Length = input(title="Schaff 2nd %D Length", type=input.integer, defval=3)
schaffSource = input(title="Schaff Source", type=input.source, defval=close)
macd = ema(schaffSource, fastLength) - ema(schaffSource, slowLength)
k = nz(fixnan(stoch(macd, macd, macd, cycleLength)))
d = ema(k, d1Length)
kd = nz(fixnan(stoch(d, d, d, cycleLength)))
stc = ema(kd, d2Length)
stc := 	stc > 100 ? 100 : stc < 0 ? 0 : stc
// stcColor = not highlightBreakouts ? (stc > stc[1] ? green : red) : #ff3013
// stcPlot = plot(stc, title="STC", color=#ff3013, transp=0)
upper = 75
lower = 25
// transparent = color.new(color.white, 100)
// upperLevel = plot(upper, title="Upper", color=color.gray)
// hline(50, title="Middle", linestyle=hline.style_dotted)
// lowerLevel = plot(lower, title="Lower", color=color.gray)
// fill(upperLevel, lowerLevel, color=#f9cb9c, transp=90)

// fill(upperLevel, stcPlot, color=upperFillColor, transp=80)
// fill(lowerLevel, stcPlot, color=lowerFillColor, transp=80)
// plotshape(crossover(stc, lower) ? lower : na, title="Crossover", location=location.absolute, style=shape.circle, size=size.tiny, color=color.green, transp=0)
// plotshape(crossunder(stc, upper) ? upper : na, title="Crossunder", location=location.absolute, style=shape.circle, size=size.tiny, color=color.red, transp=0)

// Chaikin Money Flow
////////////////////////////////////////////////
chaikinLength = input(20, minval=1)
ad = close==high and close==low or high==low ? 0 : ((2*close-low-high)/(high-low))*volume
moneyFlow = sum(ad, chaikinLength) / sum(volume, chaikinLength)

// Williams %R
////////////////////////////////////////////////
wLength = input(title='W%R Length', defval=14, minval=1)
wUpper = highest(wLength)
wLower = lowest(wLength)
wOut = 100 * (close - wUpper) / (wUpper - wLower)
// plot(out)
// wBand1 = hline(-20)
// wBand0 = hline(-80)
// fill(wBand1, wBand0)

wBandTop = input(title='W%R Top Band', defval=-20, type=input.integer)
wBandBottom = input(title='W%R Bottom Band', defval=-80, type=input.integer)

// Waddah Attar Explosion
////////////////////////////////////////////////
sensitivity = input(title="WAE Sensitivity", defval=150)
waeFastLength = input(title="WAE FastEMA Length", defval=30)
waeSlowLength = input(title="WAE SlowEMA Length", defval=50)
channelLength = input(title="WAE BB Channel Length", defval=20)
mult = input(title="WAE BB Stdev Multiplier", defval=2.0)
deadZone = input(title="WAE No trade zone threshold", defval=20)

calc_macd(source, waeFastLength, waeSlowLength) =>
	fastMA = ema(source, waeFastLength)
	slowMA = ema(source, waeSlowLength)
	fastMA - slowMA

calc_BBUpper(source, length, mult) => 
	basis = sma(source, length)
	dev = mult * stdev(source, length)
	basis + dev

calc_BBLower(source, length, mult) => 
	basis = sma(source, length)
	dev = mult * stdev(source, length)
	basis - dev

t1 = (calc_macd(close, waeFastLength, waeSlowLength) - calc_macd(close[1], waeFastLength, waeSlowLength))*sensitivity
t2 = (calc_macd(close[2], waeFastLength, waeSlowLength) - calc_macd(close[3], waeFastLength, waeSlowLength))*sensitivity

e1 = (calc_BBUpper(close, channelLength, mult) - calc_BBLower(close, channelLength, mult))

trendUp = (t1 >= 0) ? t1 : 0
trendDown = (t1 < 0) ? (-1*t1) : 0

// plot(trendUp, style=columns, linewidth=1, color=(trendUp<trendUp[1])?lime:green, transp=45, title="UpTrend")
// plot(trendDown, style=columns, linewidth=1, color=(trendDown<trendDown[1])?orange:red, transp=45, title="DownTrend")
// plot(e1, style=line, linewidth=2, color=#A0522D, title="ExplosionLine")
// hline(deadZone, color=blue, linewidth=2, title="DeadZoneLine")

// ADX (above 20 oe 25)
////////////////////////////////////////////////
adxlen = input(14, title="ADX Smoothing")
dilen = input(14, title="DI Length")
dirmov(len) =>
	up = change(high)
	down = -change(low)
	plusDM = na(up) ? na : (up > down and up > 0 ? up : 0)
    minusDM = na(down) ? na : (down > up and down > 0 ? down : 0)
	truerange = rma(tr, len)
	plus = fixnan(100 * rma(plusDM, len) / truerange)
	minus = fixnan(100 * rma(minusDM, len) / truerange)
	[plus, minus]

adx(dilen, adxlen) =>
	[plus, minus] = dirmov(dilen)
	sum = plus + minus
	adx = 100 * rma(abs(plus - minus) / (sum == 0 ? 1 : sum), adxlen)

sig = adx(dilen, adxlen)

// Avoid high spreads
// badTime = time(timeframe.period, '1400-2100')
// bgcolor(badTime ? color.red : na, transp=95)

// Conditions
////////////////////////////////////////////////
// goodTime = not badTime
crossedUnderTMA = crossunder(close, tma) or crossunder(close[1], tma[1]) and close < tma
crossedOverTMA = crossover(close, tma) or crossover(close[1], tma[1]) and close > tma
crossedUnderMAVW = crossunder(close, MAVW) or crossunder(close[1], MAVW[1]) and close < MAVW
crossedOverMAVW = crossover(close, MAVW) or crossover(close[1], MAVW[1]) and close > MAVW
crossedUnderSTC = crossunder(stc, upper) and stc[1] > upper
crossedOverSTC = crossover(stc, lower) and stc[1] < lower
bullishMoneyFlow = moneyFlow > 0.05
bearishMoneyFlow = moneyFlow < -0.05
volumeUp = trendUp > e1 or trendDown > e1
wAbove = wOut > wBandTop
wBelow = wOut < wBandBottom
adxUp = sig > 20
withinATROfBaselineLong = close < tma + atr(14) * 2
withinATROfBaselineShort = close > tma - atr(14) * 2

longCondition = crossedOverSTC and bullishMoneyFlow and adxUp
shortCondition = crossedUnderSTC and bearishMoneyFlow and adxUp

// Testing period
////////////////////////////////////////////////
startYear = input(defval=2018, title='Start year', type=input.integer)
startMonth = input(defval=1, title='Start month', type=input.integer)
endYear = input(defval=2019, title='End year', type=input.integer)
endMonth = input(defval=12, title='End month', type=input.integer)

testStartPeriod = timestamp(startYear, startMonth, 1, 0, 0)
testEndPeriod = timestamp(endYear, endMonth, 31, 0, 0)

// Calculate ATR for stop loss and take profit
////////////////////////////////////////////////

// Entry
////////////////////////////////////////////////
if time >= testStartPeriod and time <= testEndPeriod and longCondition
    strategy.entry('Enter Long 1', strategy.long)
    // strategy.entry('Enter Long 2', strategy.long)
if time >= testStartPeriod and time <= testEndPeriod and shortCondition
    strategy.entry('Enter Short 1', strategy.short)
    // strategy.entry('Enter Short 2', strategy.short)

// Exit
////////////////////////////////////////////////
stopLossAtrMultiplier = input(title='Stop Loss ATR Multiplier', type=input.float, defval=1)
takeProfitAtrMultiplier = input(title='Take Profit ATR Multiplier', type=input.float, defval=1)

// strategy.exit('exit', 'long', trail_points=trailStopTrigger, trail_offset=trailStop)
// strategy.exit('exit', 'short', trail_points=trailStopTrigger, trail_offset=trailStop)

strategy.exit('Exit Long 1', 'Enter Long 1', profit=(atr(14) * takeProfitAtrMultiplier * 100000), loss=(atr(14) * stopLossAtrMultiplier * 100000))
// if crossunder(wOut, wBandTop)
//     strategy.close('Enter Long 2')

strategy.exit('Exit Short 1', 'Enter Short 1', profit=(atr(14) * takeProfitAtrMultiplier * 100000), loss=(atr(14) * stopLossAtrMultiplier * 100000))
// if crossover(wOut, wBandBottom)
//     strategy.close('Enter Short 2')