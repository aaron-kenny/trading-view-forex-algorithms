//@version=4
// Rules:
// 1. Above daily EMA
// 2. Under hourly 50 EMA
// 3. Confirmation candles if wanted
strategy(title='Schaff Trend Cycle', overlay=true, default_qty_type=strategy.cash, default_qty_value=100000, currency='USD', linktoseries=true, commission_type=strategy.commission.cash_per_order, commission_value=27, pyramiding=2)

// Inputs
////////////////////////////////////////////////

// Schaff Trend Cycle
////////////////////////////////////////////////
fastLength = input(title="Schaff MACD Fast Length", type=input.integer, defval=23)
slowLength = input(title="Schaff MACD Slow Length", type=input.integer, defval=50)
cycleLength = input(title="Schaff Cycle Length", type=input.integer, defval=10)
d1Length = input(title="Schaff 1st %D Length", type=input.integer, defval=3)
d2Length = input(title="Schaff 2nd %D Length", type=input.integer, defval=3)
schaffSource = input(title="Schaff Source", type=input.source, defval=close)
macd = ema(schaffSource, fastLength) - ema(schaffSource, slowLength)
k = nz(fixnan(stoch(macd, macd, macd, cycleLength)))
d = ema(k, d1Length)
kd = nz(fixnan(stoch(d, d, d, cycleLength)))
stc = ema(kd, d2Length)
stc := 	stc > 100 ? 100 : stc < 0 ? 0 : stc
// stcColor = not highlightBreakouts ? (stc > stc[1] ? green : red) : #ff3013
// stcPlot = plot(stc, title="STC", color=#ff3013, transp=0)
upper = 75
lower = 25
// transparent = color.new(color.white, 100)
// upperLevel = plot(upper, title="Upper", color=color.gray)
// hline(50, title="Middle", linestyle=hline.style_dotted)
// lowerLevel = plot(lower, title="Lower", color=color.gray)
// fill(upperLevel, lowerLevel, color=#f9cb9c, transp=90)

// fill(upperLevel, stcPlot, color=upperFillColor, transp=80)
// fill(lowerLevel, stcPlot, color=lowerFillColor, transp=80)
// plotshape(crossover(stc, lower) ? lower : na, title="Crossover", location=location.absolute, style=shape.circle, size=size.tiny, color=color.green, transp=0)
// plotshape(crossunder(stc, upper) ? upper : na, title="Crossunder", location=location.absolute, style=shape.circle, size=size.tiny, color=color.red, transp=0)

// Conditions
////////////////////////////////////////////////
crossedUnderSTC = crossunder(stc, upper) and stc[1] > upper
crossedOverSTC = crossover(stc, lower) and stc[1] < lower

longCondition = crossedOverSTC
shortCondition = crossedUnderSTC

// Testing period
////////////////////////////////////////////////
startYear = input(defval=2018, title='Start year', type=input.integer)
startMonth = input(defval=1, title='Start month', type=input.integer)
endYear = input(defval=2019, title='End year', type=input.integer)
endMonth = input(defval=12, title='End month', type=input.integer)

testStartPeriod = timestamp(startYear, startMonth, 1, 0, 0)
testEndPeriod = timestamp(endYear, endMonth, 31, 0, 0)

// Calculate ATR for stop loss and take profit
////////////////////////////////////////////////

// Entry
////////////////////////////////////////////////
if time >= testStartPeriod and time <= testEndPeriod and longCondition
    strategy.entry('Enter Long 1', strategy.long)
if time >= testStartPeriod and time <= testEndPeriod and shortCondition
    strategy.entry('Enter Short 1', strategy.short)

// Exit
////////////////////////////////////////////////
stopLossAtrMultiplier = input(title='Stop Loss ATR Multiplier', type=input.float, defval=1)
takeProfitAtrMultiplier = input(title='Take Profit ATR Multiplier', type=input.float, defval=1)

// strategy.exit('exit', 'long', trail_points=trailStopTrigger, trail_offset=trailStop)
// strategy.exit('exit', 'short', trail_points=trailStopTrigger, trail_offset=trailStop)

strategy.exit('Exit Long 1', 'Enter Long 1', profit=(atr(14) * takeProfitAtrMultiplier * 100000), loss=(atr(14) * stopLossAtrMultiplier * 100000))

strategy.exit('Exit Short 1', 'Enter Short 1', profit=(atr(14) * takeProfitAtrMultiplier * 100000), loss=(atr(14) * stopLossAtrMultiplier * 100000))